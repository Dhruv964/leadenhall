"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/listDocuments";
exports.ids = ["pages/api/listDocuments"];
exports.modules = {

/***/ "node-appwrite":
/*!********************************!*\
  !*** external "node-appwrite" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("node-appwrite");

/***/ }),

/***/ "(api)/./pages/api/listDocuments.ts":
/*!************************************!*\
  !*** ./pages/api/listDocuments.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var node_appwrite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node-appwrite */ \"node-appwrite\");\n/* harmony import */ var node_appwrite__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(node_appwrite__WEBPACK_IMPORTED_MODULE_0__);\n// import sdk from \"node-appwrite\";\n// export default async function handler(req, res) {\n//     const client = new sdk.Client();\n//     const databases = new sdk.Databases(client);\n//     client\n//         .setEndpoint(process.env.NEXT_PUBLIC_ENDPOINT)\n//         .setProject(process.env.NEXT_PUBLIC_PROJECT)\n//         .setKey(process.env.NEXT_PUBLIC_KEY);\n//     try {\n//         const response = await databases.listDocuments(process.env.NEXT_PUBLIC_DATABASE, process.env.NEXT_PUBLIC_CHATS_COLLECTION);\n//         res.status(200).json(response);\n//         // const data = JSON.parse(response);\n//         // Filter objects with user_id \"tanmayjuneja\"\n//         const filteredData = response.documents.filter(doc => doc.user_id === \"tanmayjuneja12\");\n//         const numRequests = filteredData[0].num_requests;\n//     } catch (error) {\n//         console.error(error);\n//         res.status(500).json({ error: \"An error occurred\" });\n//     }\n// }\n// pages/api/getRequests.js\n\nasync function handler(req, res) {\n    const client = new (node_appwrite__WEBPACK_IMPORTED_MODULE_0___default().Client)();\n    const databases = new (node_appwrite__WEBPACK_IMPORTED_MODULE_0___default().Databases)(client);\n    client.setEndpoint(\"https://cloud.appwrite.io/v1\").setProject(\"64ac585281a2737d25cf\").setKey(\"60207dbb385c30f94a1f87a4ba189480279a980267f3d89be124c413f6e7508e4780cbddaf76441c359914d7b3adf5e5d87ba45dafea691ebc3d92ae2c0acc456438afea3b7100664405362a992d96ab2183217771cfa236b99b517a371d29a4bee89d50bcb76f6d958ab2614cdfbf544ed63a0ab1034b09dad77a5a6459aa52\");\n    try {\n        const response = await databases.listDocuments(\"64ac588688edf5762cca\", \"64b60cbb6f2ea6d94826\");\n        // console.log(response);\n        // Filter objects with user_id \"tanmayjuneja\"\n        const totalConversations = response[\"total\"];\n        const filteredData = response.documents.filter((doc)=>doc.user_id === \"tanmayjuneja12\");\n        const numRequests = parseInt(filteredData[0].num_requests);\n        const fallBack = parseInt(filteredData[0].negative_responses);\n        const convertedLeads = totalConversations - fallBack;\n        // Get the count of unique user IDs\n        // Specify the target date for which you want to count new users\n        const targetDate = \"2023-07-18\"; // Change this date to your desired target date\n        // Create a Set to store unique user IDs\n        const uniqueUserIds = new Set();\n        // Iterate through the documents array and add user IDs to the Set\n        response.documents.forEach((document)=>{\n            uniqueUserIds.add(document.user_id);\n        });\n        // Get the count of unique user IDs\n        const numberOfUniqueUserIds = uniqueUserIds.size;\n        // Calculate new unique users for the target date\n        const numChatsTargetDate = response.documents.filter((document)=>{\n            const createdAtDate = new Date(document[\"$createdAt\"]).toISOString().split(\"T\")[0];\n            return createdAtDate === targetDate;\n        }).length;\n        // Calculate new unique users for today\n        const currentDate = new Date().toISOString().split(\"T\")[0];\n        const numChatsToday = response.documents.filter((document)=>{\n            const createdAtDate = new Date(document[\"$createdAt\"]).toISOString().split(\"T\")[0];\n            return createdAtDate === currentDate;\n        }).length;\n        const newUsersForTargetDate = response.documents.filter((document)=>{\n            const createdAtDate = new Date(document[\"$createdAt\"]).toISOString().split(\"T\")[0];\n            return createdAtDate === targetDate;\n        }).reduce((accumulator, document)=>{\n            accumulator.add(document.user_id);\n            return accumulator;\n        }, new Set()).size;\n        console.log(`New unique users for ${targetDate}: ${newUsersForTargetDate}`);\n        // Calculate new unique users for today\n        const newUsersForToday = response.documents.filter((document)=>{\n            const createdAtDate = new Date(document[\"$createdAt\"]).toISOString().split(\"T\")[0];\n            return createdAtDate === currentDate;\n        }).reduce((accumulator, document)=>{\n            accumulator.add(document.user_id);\n            return accumulator;\n        }, new Set()).size;\n        const datesArray = [];\n        const numChatsArray = [];\n        const numUniqueUsersArray = [];\n        for(let i = 0; i < 7; i++){\n            const currentDate1 = new Date();\n            currentDate1.setDate(currentDate1.getDate() - i);\n            const currentDateString = currentDate1.toISOString().split(\"T\")[0];\n            datesArray.unshift(currentDateString); // Add the date to the beginning of the array\n            // Calculate the number of chats for the current date\n            const numChatsForDate = response.documents.filter((document)=>{\n                const createdAtDate = new Date(document[\"$createdAt\"]).toISOString().split(\"T\")[0];\n                return createdAtDate === currentDateString;\n            }).length;\n            numChatsArray.unshift(numChatsForDate); // Add the number of chats to the beginning of the array\n            // Calculate the number of unique users for the current date\n            const numUniqueUsersForDate = response.documents.filter((document)=>{\n                const createdAtDate = new Date(document[\"$createdAt\"]).toISOString().split(\"T\")[0];\n                return createdAtDate === currentDateString;\n            }).reduce((accumulator, document)=>{\n                accumulator.add(document.user_id);\n                return accumulator;\n            }, new Set()).size;\n            numUniqueUsersArray.unshift(numUniqueUsersForDate); // Add the number of unique users to the beginning of the array\n        }\n        res.status(200).json({\n            numRequests,\n            totalConversations,\n            convertedLeads,\n            fallBack,\n            numberOfUniqueUserIds,\n            numChatsToday,\n            numChatsTargetDate,\n            newUsersForToday,\n            newUsersForTargetDate,\n            datesArray,\n            numChatsArray,\n            numUniqueUsersArray\n        });\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({\n            error: \"An error occurred\"\n        });\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/listDocuments.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/listDocuments.ts"));
module.exports = __webpack_exports__;

})();